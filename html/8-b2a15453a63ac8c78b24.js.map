{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es6.array.fill.js","webpack:///./src/components/number/index.tsx","webpack:///./src/components/mute-button/index.tsx","webpack:///./src/components/main-display/index.tsx"],"names":["$export","P","fill","getNumberSegmentsGroup","group","index","numbers","split","className","length","key","map","number","i","Array","a","getNumberContainer","connect","count","groups","numberString","firstPart","substring","latterPart","finalPart","formatNumber","isMuted","dispatch","toggleMute","type","aria-label","onClick","Master","mute","aria-live"],"mappings":"uGACA,IAAIA,EAAU,EAAQ,QAEtBA,EAAQA,EAAQC,EAAG,QAAS,CAAEC,KAAM,EAAQ,UAE5C,EAAQ,OAAR,CAAiC,S,8GC2BjC,SAASC,EAAuBC,EAAeC,GAC7C,IAAMC,EAAUF,EAAMG,MAAM,IAC5B,OACE,yBACEC,UAAS,8BAAgCJ,EAAMK,OAC/CC,IAAG,SAAWL,GAEbC,EAAQK,KAAI,SAACC,EAAQC,GAAT,OAlBnB,SAA4BD,EAAgBP,GAC1C,OACE,yBAAKG,UAAU,mBAAmBE,IAAG,UAAYL,GAC/C,yBAAKG,UAAS,gBAAkBI,GAE7BE,MAAM,IAAIZ,KAAK,IAAIS,KAAI,SAACI,EAAGF,GAAJ,OAAU,0BAAMH,IAAG,UAAYG,GAAMA,EAAI,SAavCG,CAAmBJ,EAAQC,OAc7D,IAgBeI,eAFS,SAAC,GAAD,MAAoC,CAAEC,MAAtC,EAAGA,SAEZD,EAhBqC,SAAC,GAAD,IAR5CE,EASJD,EADgD,EAChDA,MADgD,OAGlD,yBAAKV,UAAS,kBAETU,EAAQ,OAAS,2BAA6B,KAC9CA,EAAQ,QAAU,4BAA8B,KAChDA,EAAQ,SAAW,gCAAkC,MAfpDC,EArCoB,SAACP,GAM3B,IALA,IAAMQ,EAAe,GAAGR,EAClBS,EAAYD,EAAaE,UAAU,EAAGF,EAAaX,OAAS,GAC5Dc,EAAaH,EAAaE,UAAUF,EAAaX,OAAS,GAE5De,EAAYD,EAAWD,UAAU,EAAG,GAC/BT,EAAI,EAAGA,EAAI,GAAKU,EAAWd,OAAQI,GAAK,EAC/CW,GAAa,IAAID,EAAWD,UAAUT,EAAGA,EAAI,GAG/C,OAAQQ,GAAaG,EAAeH,EAA5B,IAA2CA,GAAaG,EA2BjDC,CAkBOP,GAlBcX,MAAM,KAExC,oCACGY,EAAOR,KAAI,SAACP,EAAOS,GAAR,OAAcV,EAAuBC,EAAOS,Y,oCCJ/CI,eATS,SAAC,GAAD,MAElB,CAAES,QAFgB,EACpBA,YAGuB,SAACC,GAAD,MACzB,CACEC,WAAY,kBAAMD,EAAS,CAAEE,KAAM,oBAGxBZ,EA/BI,SAAC,GAAD,IAAGS,EAAH,EAAGA,QAASE,EAAZ,EAAYA,WAAZ,OACjB,yBAAKpB,UAAU,yBACb,4BACEA,UAAS,eAAiBkB,EAAyB,GAAf,cACpCI,aAAW,cACXD,KAAK,SACLE,QAAS,WACPC,SAAOC,MAAQP,EACfE,MAGF,kBAAC,IAAD,OAEF,0BAAMM,YAAU,SAAS1B,UAAU,SAAnC,QAEG,IACCkB,EAAU,MAAQ,UCzBX,4BACb,6BACE,yBAAKlB,UAAU,aAAf,cACA,kBAAC,EAAD,MACA,kBAAC,EAAD,S","file":"8-b2a15453a63ac8c78b24.js","sourcesContent":["// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\nvar $export = require('./_export');\n\n$export($export.P, 'Array', { fill: require('./_array-fill') });\n\nrequire('./_add-to-unscopables')('fill');\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport './number.scss';\n\ninterface NumberDisplayProps {\n  count: number;\n}\n\nexport const formatNumber = (number: number) => {\n  const numberString = `${number}`;\n  const firstPart = numberString.substring(0, numberString.length % 3);\n  const latterPart = numberString.substring(numberString.length % 3);\n\n  let finalPart = latterPart.substring(0, 3);\n  for (let i = 3; i + 3 <= latterPart.length; i += 3) {\n    finalPart += ` ${latterPart.substring(i, i + 3)}`;\n  }\n\n  return (firstPart && finalPart ? `${firstPart} ` : firstPart) + finalPart;\n};\n\nfunction getNumberContainer(number: string, index: number) {\n  return (\n    <div className=\"number-container\" key={`number-${index}`}>\n      <div className={`inner inner--${number}`}>\n        {/* eslint-disable-next-line react/no-array-index-key */}\n        {Array(11).fill('').map((a, i) => <span key={`number-${i}`}>{i % 10}</span>)}\n      </div>\n    </div>\n  );\n}\n\nfunction getNumberSegmentsGroup(group: string, index: number) {\n  const numbers = group.split('');\n  return (\n    <div\n      className={`number-group number-group--${group.length}`}\n      key={`group-${index}`}\n    >\n      {numbers.map((number, i) => getNumberContainer(number, i))}\n    </div>\n  );\n}\n\nfunction getNumberSegments(number: number): JSX.Element {\n  const groups = formatNumber(number).split(' ');\n  return (\n    <>\n      {groups.map((group, i) => getNumberSegmentsGroup(group, i))}\n    </>\n  );\n}\n\nconst NumberDisplay: React.FC<NumberDisplayProps> = (\n  { count }: NumberDisplayProps,\n) => (\n  <div className={\n    `number-display${\n      (count > 999999 ? ' number-display--smaller' : '')\n    + (count > 9999999 ? ' number-display--smallest' : '')\n    + (count > 99999999 ? ' number-display--huge-numbers' : '')}`\n  }\n  >\n    { getNumberSegments(count) }\n  </div>\n);\n\nconst mapStateToProps = ({ count }: NumberDisplayProps) => ({ count });\n\nexport default connect(mapStateToProps)(NumberDisplay);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { Master } from 'tone';\n\nimport './mute-button.scss';\nimport BarsIcon from '../bars-icon';\n\ninterface MuteButtonProps {\n  isMuted: boolean;\n  toggleMute: () => {};\n}\n\nconst MuteButton = ({ isMuted, toggleMute }: MuteButtonProps) => (\n  <div className=\"mute-button-container\">\n    <button\n      className={`mute-button${!isMuted ? ' --unmuted' : ''}`}\n      aria-label=\"Toggle mute\"\n      type=\"button\"\n      onClick={() => {\n        Master.mute = !isMuted;\n        toggleMute();\n      }}\n    >\n      <BarsIcon />\n    </button>\n    <span aria-live=\"polite\" className=\"label\">\n      Sound\n      {' '}\n      { isMuted ? 'Off' : 'On'}\n    </span>\n  </div>\n);\n\n\nconst mapStateToProps = (\n  { isMuted }: MuteButtonProps,\n) => ({ isMuted });\n\nconst mapDispatchToProps = (dispatch: any) => (\n  {\n    toggleMute: () => dispatch({ type: 'TOGGLE_MUTE' }),\n  });\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MuteButton);\n","import React from 'react';\nimport NumberDisplay from '../number';\nimport MuteButton from '../mute-button';\n\nexport default () => (\n  <div>\n    <div className=\"main-sign\">I love you</div>\n    <MuteButton />\n    <NumberDisplay />\n  </div>\n);\n"],"sourceRoot":""}