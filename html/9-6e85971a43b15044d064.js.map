{"version":3,"sources":["webpack:///./src/state/getNumber.ts","webpack:///./src/components/countup/index.ts","webpack:///./src/components/launch-button/index.tsx"],"names":["API_URL","getFallbackTimestamp","Math","floor","Date","now","getUnixTimestamp","a","fetch","response","status","json","data","unixtime","timestamp","delta","eights","tens","twelves","getNumber","interval","SOUND_PATH","loveYous","hundreds","thousands","millions","freeverb","Freeverb","roomSize","dampening","toMaster","output","Volume","connect","counter","loadedSounds","onload","i","push","Player","sayFullPhrase","number","random","length","start","setTimeout","sayNumber","delay","currentNumber","millionsCount","hundredThousandsCount","thousandsCount","hundredsCount","remainder","startCountup","callback","Promise","resolve","loadCheckInterval","setInterval","clearInterval","isExperienceLaunched","dispatch","launchExperience","type","increment","setCount","payload","aria-label","className","onClick","count"],"mappings":"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","file":"9-6e85971a43b15044d064.js","sourcesContent":["const API_URL = '//worldtimeapi.org/api/timezone/Europe/London';\nconst BEGINNING = 1585562400 - 3600;\n\nconst getFallbackTimestamp = () => Math.floor(Date.now() / 1000);\n\nasync function getUnixTimestamp() {\n  if (typeof fetch === 'function') {\n    try {\n      const response = await fetch(API_URL);\n      if (response.status === 200) {\n        const data = await response.json();\n        return data.unixtime || getFallbackTimestamp();\n      }\n    } catch {\n      return getFallbackTimestamp();\n    }\n    return getFallbackTimestamp();\n  }\n  return getFallbackTimestamp();\n}\n\nasync function getNumber() {\n  const timestamp = await getUnixTimestamp();\n  if (timestamp < BEGINNING) {\n    return timestamp - BEGINNING;\n  }\n  // 8 until 100,000\n  // 10 until 1,000,000\n  // 12 after\n  let delta = timestamp - BEGINNING;\n\n  const eights = Math.floor(delta / 8);\n\n  if (eights < 100000) {\n    return eights;\n  }\n\n  delta -= 800000;\n\n  const tens = Math.floor(delta / 10);\n\n  if (tens < 900000) {\n    return 100000 + tens;\n  }\n\n  delta -= 9000000;\n\n  const twelves = Math.floor(delta / 12);\n\n  return 1000000 + twelves;\n}\n\nexport default getNumber;\n","import { Player, Freeverb, Volume } from 'tone';\n\nconst EXT = 'mp3';\nconst SOUND_PATH = 'https://cdn.iloveyouinfinity.com/';\nconst STANDARD_DELAY = 1650;\n\nlet interval: NodeJS.Timeout;\n\nconst loveYous: Player[] = [];\nconst tens: Player[] = [];\nconst hundreds: Player[] = [];\nconst thousands: Player[] = [];\nconst millions: Player[] = [];\n\nconst freeverb = new Freeverb({ roomSize: 0.6, dampening: 6000 }).toMaster();\nconst freeverbNode = new Volume(-8).connect(freeverb);\nconst output = new Volume(-2).toMaster();\n\nlet counter = 0;\n\nlet loadedSounds = 0;\n\nconst onload = () => {\n  loadedSounds += 1;\n};\n\nconst finishLoading = () => new Promise((resolve) => {\n  for (let i = 1; i <= 99; i += 1) {\n    tens.push(new Player(`${SOUND_PATH + i}.${EXT}`, onload).connect(output));\n    thousands.push(\n      new Player(`${SOUND_PATH + (i * 1000)}.${EXT}`, onload).connect(output),\n    );\n  }\n\n  // @TODO: Implement a better approach with events\n  const loadCheckInterval = setInterval(() => {\n    if (loadedSounds > 210) {\n      clearInterval(loadCheckInterval);\n      resolve();\n    }\n  }, 10);\n});\n\nfor (let i = 2; i < 14; i += 1) {\n  if (i !== 3 && i !== 4) {\n    loveYous.push(new Player(`${SOUND_PATH}I Love You${i}.${EXT}`, onload).connect(output));\n  }\n}\n\nfor (let i = 1; i < 10; i += 1) {\n  hundreds.push(new Player(`${SOUND_PATH + (i * 100)}.${EXT}`, onload).connect(output));\n}\n\nfor (let i = 1; i < 5; i += 1) {\n  millions.push(new Player(`${SOUND_PATH}Million.${i}.${EXT}`, onload).connect(output));\n}\n\nfunction sayNumber(number: number) {\n  let delay = 0;\n\n  let currentNumber = number;\n\n  const millionsCount = Math.floor(number / (10 ** 6));\n  currentNumber -= millionsCount * 10 ** 6;\n  const hundredThousandsCount = Math.floor(currentNumber / (10 ** 5));\n  currentNumber -= hundredThousandsCount * 10 ** 5;\n  const thousandsCount = Math.floor(currentNumber / 1000);\n  currentNumber -= thousandsCount * 1000;\n  const hundredsCount = Math.floor(currentNumber / 100);\n  const remainder = currentNumber - hundredsCount * 100;\n\n  if (millionsCount > 0) {\n    setTimeout(() => tens[millionsCount - 1].start(), delay);\n    delay += 1650;\n\n    setTimeout(\n      () => millions[Math.floor(Math.random() * millions.length)].start(), delay,\n    );\n    delay += STANDARD_DELAY;\n  }\n\n  if (hundredThousandsCount > 0) {\n    setTimeout(() => sayNumber(hundredThousandsCount * 100), delay);\n    delay += STANDARD_DELAY;\n  }\n  if (thousandsCount > 0) {\n    setTimeout(() => thousands[thousandsCount - 1].start(), delay);\n    delay += STANDARD_DELAY;\n  }\n  if (hundredsCount > 0) {\n    setTimeout(() => hundreds[hundredsCount - 1].start(), delay);\n    delay += STANDARD_DELAY;\n  }\n  if (remainder > 0) {\n    setTimeout(() => tens[remainder - 1].start(), delay);\n  }\n}\n\nfunction sayFullPhrase(number: number) {\n  loveYous[Math.floor(Math.random() * loveYous.length)].start();\n  setTimeout(() => sayNumber(number), 1500);\n}\n\n\nconst startCountup = async (number: number, callback: any) => {\n  await finishLoading();\n  counter = number;\n  clearInterval(interval);\n  sayFullPhrase(counter);\n\n  let delay = 8000;\n\n  if (counter >= 10 ** 6) {\n    delay = 12000;\n  } else if (counter >= 10 ** 5) {\n    delay = 10000;\n  }\n  interval = setInterval(() => {\n    counter += 1;\n    sayFullPhrase(counter);\n    setTimeout(callback, 1000);\n  }, delay);\n};\n\nexport const setReverb = (enable: boolean = true) => {\n  if (enable) {\n    output.connect(freeverbNode);\n  } else {\n    output.toMaster();\n  }\n};\n\nexport default startCountup;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport getNumber from '../../state/getNumber';\nimport startCountup from '../countup';\nimport BarsIcon from '../bars-icon';\n\ninterface LaunchButtonProps {\n  isExperienceLaunched: boolean;\n  launchExperience: () => {};\n  increment: () => {};\n  setCount: (payload: number) => {};\n}\n\nconst LaunchButton = ({\n  isExperienceLaunched, launchExperience, increment, setCount,\n}: LaunchButtonProps) => (\n  <button\n    aria-label=\"Start experience\"\n    className={`main-button mute-button --unmuted${\n      isExperienceLaunched ? ' --launched' : ''}`}\n    onClick={async () => {\n      launchExperience();\n      const count = await getNumber();\n      if (count < 0) {\n        // Negative value means number of seconds till launch\n        setCount(0);\n        setTimeout(() => {\n          setCount(1);\n          startCountup(1, increment);\n        }, count * -1000);\n      } else {\n        setCount(count);\n        setTimeout(() => startCountup(count, increment), 500);\n      }\n    }}\n    type=\"button\"\n  >\n    <BarsIcon />\n  </button>\n);\n\nconst mapStateToProps = (\n  { isExperienceLaunched }: LaunchButtonProps,\n) => ({ isExperienceLaunched });\n\nconst mapDispatchToProps = (dispatch: any) => (\n  {\n    launchExperience: () => dispatch({ type: 'LAUNCH_EXPERIENCE' }),\n    increment: () => dispatch({ type: 'INCREMENT' }),\n    setCount: (payload: number) => dispatch({ type: 'SET_COUNT', payload }),\n  });\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LaunchButton);\n"],"sourceRoot":""}